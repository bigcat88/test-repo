name: Issue triage reminders

on:
  schedule:
    - cron: '0 2 * * *'  # 02:00 UTC daily
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Read triage config
        id: cfg
        uses: jbutcher5/read-yaml@1.6
        with:
          file: .github/triage-issue-bot-config.yml
          key-path: '["triage"]'

      - name: Find stale issues
        id: search
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cfg = JSON.parse(process.env.CFG || '{}');
            const since = new Date(
              Date.now() - cfg.first_ping_after_days * 24*3600*1000
            ).toISOString();

            // NOTE: removed "no:label" so we catch reminder-1, reminder-2, etc.
            const q = [
              `repo:${context.repo.owner}/${context.repo.repo}`,
              `is:issue is:open`,
              `updated:<${since}`
            ].join(' ');

            const res = await github.rest.search.issuesAndPullRequests({
              q, per_page: 100
            });

            core.setOutput("issues", JSON.stringify(
              res.data.items.map(i => i.number)
            ));

        env:
          CFG: ${{ steps.cfg.outputs.data }}

      - name: Ping & rotate labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Safe parse
            const issues = JSON.parse(process.env.ISSUES || '[]');
            const cfg    = JSON.parse(process.env.CFG    || '{}');

            for (const num of issues) {
              const { data: issue } = await github.rest.issues.get({
                ...context.repo,
                issue_number: num
              });

              // ❌ Skip if any label is NOT a "reminder-N"
              const labels = issue.labels.map(l => l.name);
              if (labels.some(n => !/^reminder-\d+$/.test(n))) continue;

              // ⏱️ Enforce repeat_every_days
              const cutoff = new Date(
                Date.now() - cfg.repeat_every_days * 24*3600*1000
              );
              if (new Date(issue.updated_at) > cutoff) continue;

              // 🔢 Compute next round
              const remLabel = labels.find(n => /^reminder-\d+$/.test(n));
              const current  = remLabel ? parseInt(remLabel.split('-')[1],10) : 0;
              const next     = current + 1;

              // 🚨 Escalate mentions once we hit the threshold
              const mention = next >= cfg.escalation_ping
                ? '\n\n' + (cfg.escalation_mentions || []).join(' ')
                : '';

              // 💬 Post the reminder
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: num,
                body: `🔔 Friendly reminder – please triage this issue.${mention}`
              });

              // 🏷️ Rotate the label
              if (remLabel) {
                await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: num,
                  name: remLabel
                }).catch(()=>{/* ignore if already gone */});
              }
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: num,
                labels: [`reminder-${next}`]
              });
            }
        env:
          ISSUES: ${{ steps.search.outputs.issues }}
          CFG:    ${{ steps.cfg.outputs.data }}

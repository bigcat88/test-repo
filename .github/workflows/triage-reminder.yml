# .github/workflows/triage-reminder.yml
name: Issue triage reminders

on:
  schedule:
    - cron: '0 8 * * *'      # 08:00 UTC daily â€“ change if you wish
  workflow_dispatch:          # run on demand

permissions:
  issues: write
  contents: read

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: Load config
        id: cfg
        uses: actions/read-yaml@v1
        with:
          file: .github/issue-bot-config.yml
          property-path: triage

      - name: Find candidates
        id: search
        uses: actions/github-script@v7
        with:
          script: |
            const {first_ping_after_days, repeat_every_days} = ${{steps.cfg.outputs}};
            const since = new Date(Date.now() - first_ping_after_days*24*3600*1000).toISOString();
            // Open issues, no labels, updated before 'since'
            const q = `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open no:label updated:<${since}`;
            const res = await github.rest.search.issuesAndPullRequests({q, per_page: 100});
            core.setOutput('issues', JSON.stringify(res.data.items.map(i => i.number)));

      - name: Ping issues
        uses: actions/github-script@v7
        with:
          script: |
            const issues = JSON.parse(process.env.ISSUES || '[]');
            const cfg   = JSON.parse(process.env.CFG);
            for (const number of issues) {
              const issue = await github.rest.issues.get({...context.repo, issue_number: number});
              // Count existing reminder-N labels
              const remLabel = issue.data.labels.find(l => l.name.startsWith('reminder-'));
              const currentRound = remLabel ? parseInt(remLabel.name.split('-')[1]) : 0;
              // Only ping every repeat_every_days
              const cutoff = new Date(Date.now() - cfg.repeat_every_days*24*3600*1000);
              if (new Date(issue.data.updated_at) > cutoff) continue;

              const nextRound = currentRound + 1;
              const mentionLine = (nextRound >= cfg.escalation_ping)
                   ? '\n\n' + cfg.escalation_mentions.join(' ')
                   : '';

              await github.rest.issues.createComment({
                 ...context.repo, issue_number: number,
                 body: `ðŸ”” Friendly reminder â€“ please triage this issue.${mentionLine}`
              });

              // Update reminder label
              if (remLabel)
                 await github.rest.issues.removeLabel({...context.repo, issue_number: number, name: remLabel.name});
              await github.rest.issues.addLabels({...context.repo, issue_number: number, labels: [`reminder-${nextRound}`]});
            }
        env:
          ISSUES: ${{steps.search.outputs.issues}}
          CFG:    ${{steps.cfg.outputs}}

      - name: Remove label(s) if commenter is not allow-listed
        uses: actions/github-script@v7
        with:
          script: |
            const allow = JSON.parse(process.env.AL).map(s=>s.toLowerCase());
            const commenter = context.payload.comment.user.login.toLowerCase();
            if (allow.includes(commenter)) return;

            const labels = context.payload.issue.labels.map(l=>l.name);
            const ops = [];

            if (labels.includes('question'))         ops.push('question');
            if (labels.includes('missing information')) ops.push('missing information');
            if (labels.includes('question-reminded'))   ops.push('question-reminded');

            for (const name of ops) {
              await github.rest.issues.removeLabel({
                ...context.repo, issue_number: context.issue.number, name
              }).catch(()=>{});
            }
        env:
          AL: ${{ steps.cfg.outputs }}

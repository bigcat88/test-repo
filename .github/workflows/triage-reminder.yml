name: Issue triage reminders

on:
  schedule:
    - cron: '0 8 * * *'       # daily at 08:00 UTC
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read triage config
        id: cfg
        uses: jbutcher5/read-yaml@1.6
        with:
          file: .github/issue-bot-config.yml
          key-path: '["triage"]'

      # 3Ô∏è‚É£ find all open, un-labelled issues older than first_ping_after_days
      - name: Find stale issues
        id: search
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cfg = JSON.parse(process.env.CFG);
            const since = new Date(Date.now() - cfg.first_ping_after_days*24*3600*1000).toISOString();
            const q = `repo:${context.repo.owner}/${context.repo.repo} is:issue is:open no:label updated:<${since}`;
            const res = await github.rest.search.issuesAndPullRequests({ q, per_page: 100 });
            const nums = res.data.items.map(i => i.number);
            core.setOutput("issues", JSON.stringify(nums));

      # 4Ô∏è‚É£ ping & advance reminder-N label (plus escalation mentions)
      - name: Ping & label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issues = JSON.parse(process.env.ISSUES);
            const cfg    = JSON.parse(process.env.CFG);

            for (const num of issues) {
              const { data: issue } = await github.rest.issues.get({
                ...context.repo, issue_number: num
              });

              // only re-ping after repeat_every_days
              const cutoff = new Date(Date.now() - cfg.repeat_every_days*24*3600*1000);
              if (new Date(issue.updated_at) > cutoff) continue;

              // compute next reminder round
              const remLabel = issue.labels.find(l => l.name.startsWith('reminder-'));
              const current  = remLabel ? parseInt(remLabel.name.split('-')[1]) : 0;
              const next     = current + 1;

              // build mention line if escalated
              const mention = next >= cfg.escalation_ping
                ? '\n\n' + cfg.escalation_mentions.join(' ')
                : '';

              // post comment
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: num,
                body: `üîî Friendly reminder ‚Äì please triage this issue.${mention}`
              });

              // rotate the label
              if (remLabel) {
                await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: num,
                  name: remLabel.name
                }).catch(() => {});
              }
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: num,
                labels: [`reminder-${next}`]
              });
            }
        env:
          CFG:    ${{ steps.cfg.outputs.data }}
          ISSUES: ${{ steps.search.outputs.issues }}
